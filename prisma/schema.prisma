datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id String @id @default(uuid())
  name String @unique
  userRoles UserRole[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

enum Gender {
  Male
  Female
}

model User {
  id String @id @default(uuid())
  username String @unique
  uniqueId String @unique @map("unique_id")
  matricNumber String? @unique @map("matric_number")
  firstName String
  lastName String
  gender Gender
  email String @unique
  phoneNumber String @unique @map("phone_number")
  password String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles UserRole[]
  userProfile UserProfile?
  isActive Boolean @default(false) @map("is_active")
  lastLogin DateTime? @map("last_login")

  @@map("users")
}

model UserRole {
  id String @id @default(uuid())
  userId String
  roleId String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

enum Title {
  Mr
  Mrs
  Miss
  Brother
  Sister
  Dr
  Prof
  Rev
  Pastor
  Evangelist
  Apostle
  Bishop
  Elder
  Deacon
  Deaconess
  Prophet
  Prophetess
  Chief
  Honorable
}

model UserProfile {
  id String @id @default(uuid())
  userId String @unique @map("user_id")
  title Title
  dateOfBirth DateTime @map("date_of_birth")
  address String
  stateOfResidence String @map("state_of_residence")
  country String
  maritalStatus String @map("marital_status")
  salvationStatus String @map("salvation_status")
  salvationStory String @map("salvation_story")
  gogMembershipStatus Boolean @map("gog_membership_status")
  gogMembershipDate DateTime? @map("gog_membership_date")
  classCommitmentStatus Boolean @map("commitment_status")
  assignmentCommitmentStatus Boolean @map("assignment_commitment_status")
  reasonForJoining String @map("reason_for_joining")
  churchName String @map("church_name")
  occupation String @map("occupation")
  profilePicture String @map("profile_picture")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  refereeName String @map("referee_name")
  refereePhoneNumber String @map("referee_phone_number")
  refereeEmail String @map("referee_email")
  refereeRelationship String @map("referee_relationship")
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  consentCheck Boolean @default(false) @map("consent_check")

  @@map("user_profiles")
}