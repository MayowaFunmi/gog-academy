datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  userRoles UserRole[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("roles")
}

enum Gender {
  Male
  Female
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique
  uniqueId        String           @unique @map("unique_id")
  matricNumber    String?          @unique @map("matric_number")
  firstName       String
  lastName        String
  gender          Gender
  email           String           @unique
  phoneNumber     String           @unique @map("phone_number")
  password        String
  profileStrength Int              @default(0) @map("profile_strength")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  roles           UserRole[]
  userProfile     UserProfile?
  isActive        Boolean          @default(false) @map("is_active")
  lastLogin       DateTime?        @map("last_login")
  attendance      Attendance[]
  TaskSubmission  TaskSubmission[]

  @@map("users")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

enum Title {
  Mr
  Mrs
  Miss
  Brother
  Sister
  Dr
  Prof
  Rev
  Pastor
  Evangelist
  Apostle
  Bishop
  Elder
  Deacon
  Deaconess
  Prophet
  Prophetess
  Chief
  Honorable
}

model UserProfile {
  id                         String      @id @default(uuid())
  cohortId                   String
  userId                     String      @unique @map("user_id")
  title                      Title
  dateOfBirth                DateTime    @map("date_of_birth")
  address                    String
  stateOfResidence           String?     @default("") @map("state_of_residence")
  country                    String
  maritalStatus              String      @map("marital_status")
  salvationStatus            String      @map("salvation_status")
  salvationStory             String      @map("salvation_story")
  gogMembershipStatus        Boolean     @map("gog_membership_status")
  previouslyApplied          Boolean     @default(false) @map("previously_applied")
  gogMembershipYear          String?     @map("gog_membership_date")
  classCommitmentStatus      Boolean     @map("commitment_status")
  assignmentCommitmentStatus Boolean     @map("assignment_commitment_status")
  reasonForJoining           String      @map("reason_for_joining")
  churchName                 String      @map("church_name")
  occupation                 String      @map("occupation")
  profilePicture             String?     @map("profile_picture")
  createdAt                  DateTime    @default(now()) @map("created_at")
  updatedAt                  DateTime    @updatedAt @map("updated_at")
  refereeName                String      @map("referee_name")
  refereePhoneNumber         String      @map("referee_phone_number")
  refereeEmail               String      @map("referee_email")
  refereeRelationship        String      @map("referee_relationship")
  user                       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  // attendance                 Attendance?
  consentCheck               Boolean     @default(false) @map("consent_check")

  @@map("user_profiles")
}

model AcademyCohort {
  id        String   @id @default(uuid())
  cohort    String // mount zion, mount carmel, mount olives
  slug      String   @unique
  startDate DateTime @map("date_started")
  batch     String   @map("cohor_batch")
  endDate   DateTime @map("date_ended")

  taskTypes    AcademyTaskType[]
  academicWeek AcademicWeek[]
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@map("academy_cohort")
}

model AcademyTaskType {
  id                  String        @id @default(uuid())
  cohortId            String        @map("cohort_id")
  name                String // prayers, lectures, presentations => attendance  // assignments, SSG reflections, PGG sermons, exams => submissions + marks
  slug                String
  requiresAttendance  Boolean       @default(false) @map("requires_attendance")
  requiresSubmissions Boolean       @default(false) @map("requires_submissions")
  requiresMark        Boolean       @default(false) @map("requires_mark")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  dailyTasks          DailyTask[]   @relation("TypeTasks") // one-to-many
  cohort              AcademyCohort @relation(fields: [cohortId], references: [id])

  @@map("academic_task_type")
}

model AcademicWeek {
  id         String   @id @default(uuid())
  cohortId   String   @map("cohort_id")
  weekNumber Int
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  // currentWeek Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  dailyTasks      DailyTask[]      @relation("WeekTasks") // one-to-many
  cohort          AcademyCohort    @relation(fields: [cohortId], references: [id])
  taskSubmissions TaskSubmission[]

  @@map("academic_week")
}

model DailyTask {
  id             String   @id @default(uuid())
  title          String?
  taskTypeId     String
  description    String
  weekId         String
  taskLink       String?  @map("task_link")
  taskScriptures String?  @map("task_scriptures")
  dayOfWeek      Int      @map("day_of_week")
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  hasExtension   Boolean  @default(false) @map("has_extension")
  activated      Boolean  @default(false)
  // isSubmitted    Boolean  @default(false) @map("is_submitted")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  academicWeek    AcademicWeek     @relation("WeekTasks", fields: [weekId], references: [id])
  taskType        AcademyTaskType  @relation("TypeTasks", fields: [taskTypeId], references: [id])
  attendance      Attendance[]
  taskSubmissions TaskSubmission[]

  @@map("daily_task")
}

model TaskSubmission {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  taskId      String   @map("task_id")
  weekId      String   @map("week_id")
  submission  String?
  score       Int?
  submittedAt DateTime @default(now()) @map("submitted_at")
  isSubmitted Boolean  @default(false) @map("is_submitted")
  isLate      Boolean? @default(false) @map("is_late")
  isApproved  Boolean? @default(false) @map("is_approved")

  user         User                   @relation(fields: [userId], references: [id])
  dailyTask    DailyTask              @relation(fields: [taskId], references: [id])
  academicWeek AcademicWeek           @relation(fields: [weekId], references: [id])
  screenshots  SubmissionScreenshot[]

  // @@unique([userId, taskId])
  @@map("task_submission")
}

model SubmissionScreenshot {
  id           String   @id @default(uuid())
  submissionId String   @map("submission_id")
  filePath     String
  uploadedAt   DateTime @default(now()) @map("uploaded_at")

  taskSubmission TaskSubmission @relation(fields: [submissionId], references: [id])

  @@map("submission_screenshot")
}

model Attendance {
  id         String   @id @default(uuid())
  userId     String
  taskId     String
  date       DateTime
  attendedAt DateTime @default(now()) @map("attended_at")
  marked     Boolean  @default(false)
  isLate     Boolean  @default(false)
  score      Int

  user User @relation(fields: [userId], references: [id])
  task DailyTask   @relation(fields: [taskId], references: [id])

  @@map("attendance")
}
